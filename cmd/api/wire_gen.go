// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/u-nation/go-practice-todo/config"
	repository2 "github.com/u-nation/go-practice-todo/pkg/application/repository"
	"github.com/u-nation/go-practice-todo/pkg/infrastructure/db"
	"github.com/u-nation/go-practice-todo/pkg/infrastructure/repository"
	"github.com/u-nation/go-practice-todo/pkg/presentation"
)

// Injectors from wire.go:

func initialize(config2 *config.APIConfig) (*API, error) {
	applicationController := presentation.NewApplicationController(config2)
	dbConfig := config2.DB
	gormDB, err := db.ProvideDB(dbConfig)
	if err != nil {
		return nil, err
	}
	transactionRepositoryImpl := repository.TransactionRepositoryImpl{
		DB: gormDB,
	}
	healthCheckRepositoryImpl := &repository.HealthCheckRepositoryImpl{
		TransactionRepositoryImpl: transactionRepositoryImpl,
	}
	healthCheckController := presentation.HealthCheckController{
		ApplicationController: applicationController,
		HealthCheckRepository: healthCheckRepositoryImpl,
	}
	api := NewAPI(config2, healthCheckController)
	return api, nil
}

// wire.go:

var ProvideApp = wire.NewSet(wire.FieldsOf(new(*config.APIConfig), "DB"), ProvideRepository,

	ProvidePresenter,

	NewAPI,
)

var ProvideRepository = wire.NewSet(db.ProvideDB, wire.Struct(new(repository.TransactionRepositoryImpl), "*"), wire.Bind(new(repository2.TransactionRepository), new(*repository.TransactionRepositoryImpl)), wire.Struct(new(repository.TodoRepositoryImpl), "*"), wire.Bind(new(repository2.TodoRepository), new(*repository.TodoRepositoryImpl)), wire.Struct(new(repository.HealthCheckRepositoryImpl), "*"), wire.Bind(new(repository2.HealthCheckRepository), new(*repository.HealthCheckRepositoryImpl)))

var ProvidePresenter = wire.NewSet(presentation.NewApplicationController, presentation.HealthCheckControllerSet)
